import hashlib


def hash_text_info(hash_type: str, text: str):
    hash_type = hash_type.lower()

    if hash_type not in hashlib.algorithms_guaranteed:
        return f"‚ùå –ê–ª–≥–æ—Ä–∏—Ç–º \"{hash_type}\" –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è"

    encoded = text.encode()

    h = getattr(hashlib, hash_type)()
    h.update(encoded)
    
    return f"üîë –†–µ–∑—É–ª—å—Ç–∞—Ç ({hash_type.upper()}):\n`{h.hexdigest()}`"


def hash_file(file_path: str, hash_type: str = "sha256"):
    hash_type = hash_type.lower()

    if hash_type not in hashlib.algorithms_guaranteed:
        return f"‚ùå –ê–ª–≥–æ—Ä–∏—Ç–º \"{hash_type}\" –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è."

    try:
        hasher = getattr(hashlib, hash_type)()
        with open(file_path, "rb") as f:
            while chunk := f.read(8192):
                hasher.update(chunk)
        return f"üîë –•–µ—à —Ñ–∞–π–ª—É ({hash_type.upper()}):\n`{hasher.hexdigest()}`"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ö–µ—à—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {str(e)}"


def get_supported_hashes() -> str:
    algos = sorted(hashlib.algorithms_guaranteed)

    formatted = "\n".join(f"‚Ä¢ `{algo.upper()}`" for algo in algos)

    return f"üßæ *–î–æ—Å—Ç—É–ø–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ö–µ—à—É–≤–∞–Ω–Ω—è:*\n\n{formatted}"
